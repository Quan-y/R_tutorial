dim(apps)
boxplot(as.numeric(apps$Rating)~as.numeric(apps$Installs), xlab = 'Installs', ylab = 'Rating')
cat('Answer: based on the boxplot, we can see that when install between 2 and 12, the variance of Rating is large and data with lower installs have higher rating')
# code goes here
library(plyr)
# split
apps.split <- split(apps, apps$Category)
apps.split
unique(apps$Category)
rollCall274<-readLines("Roll_Call_274.xml")
# code goes here
nrow(rollCall274)
rollCall274<-readLines("Roll_Call_274.xml")
# code goes here
nrow(rollCall274)
# code goes here
length(rollCall274)
vote_pattern <- '<recorded-vote>'
votegrep <- grep(pattern, data)
vote_pattern <- '<recorded-vote>'
votegrep <- grep(vote_pattern, rollCall274)
length(votegrep)
length(votegrep)
id_pattern <- "name-id='[A-Z][0-9]{6}'"
reg_data <- function (pattern, data) {
sgrep <- grep(pattern, data)
matches <- gregexpr(pattern = pattern, text = data[sgrep])
reg.data <- unlist(regmatches(data[sgrep], matches), use.names = FALSE)
return(reg.data)
}
id_pattern <- "name-id='[A-Z][0-9]{6}'"
id_data <- reg_data(id_pattern, rollCall274)
id_data
reg_data <- function (pattern, data) {
sgrep <- grep(pattern, data)
matches <- gregexpr(pattern = pattern, text = data[sgrep])
reg.data <- unlist(regmatches(data[sgrep], matches), use.names = FALSE)
return(reg.data)
}
id_pattern <- 'name-id="[A-Z][0-9]{6}"'
id_data <- reg_data(id_pattern, rollCall274)
id_data
substr(id_data, start = 10, end = 17)
substr(id_data, start = 10, stop = 17)
substr(id_data, start = 10, stop = 16)
# code goes here
reg_data <- function (pattern, data) {
sgrep <- grep(pattern, data)
matches <- gregexpr(pattern = pattern, text = data[sgrep])
reg.data <- unlist(regmatches(data[sgrep], matches), use.names = FALSE)
return(reg.data)
}
id_pattern <- 'name-id="[A-Z][0-9]{6}"'
id_data <- reg_data(id_pattern, rollCall274)
id_data <- substr(id_data, start = 10, stop = 16)
id_data[0]
id_data[1]
id_data[2]
id_data[3]
# code goes here
reg_data <- function (pattern, data) {
sgrep <- grep(pattern, data)
matches <- gregexpr(pattern = pattern, text = data[sgrep])
reg.data <- unlist(regmatches(data[sgrep], matches), use.names = FALSE)
return(reg.data)
}
id_pattern <- 'name-id="[A-Z][0-9]{6}"'
id_data <- reg_data(id_pattern, rollCall274)
id_data <- substr(id_data, start = 11, stop = 15)
id_data[]1
id_data[1]
id_data[2]
# code goes here
reg_data <- function (pattern, data) {
sgrep <- grep(pattern, data)
matches <- gregexpr(pattern = pattern, text = data[sgrep])
reg.data <- unlist(regmatches(data[sgrep], matches), use.names = FALSE)
return(reg.data)
}
id_pattern <- 'name-id="[A-Z][0-9]{6}"'
id_data <- reg_data(id_pattern, rollCall274)
id_data <- substr(id_data, start = 10, stop = 16)
head(id_data, 5)
name_pattern <- 'unaccented-name="[a-zA-Z(),]"'
name_data <- reg_data(name_pattern, rollCall274)
name_data
name_pattern <- 'unaccented-name="[a-zA-Z(), ]+"'
name_data <- reg_data(name_pattern, rollCall274)
name_data
length(name_data)
name_pattern <- 'unaccented-name="[a-zA-Z(),. ]+"'
name_data <- reg_data(name_pattern, rollCall274)
length(name_data)
length(id_data)
name_pattern <- 'unaccented-name="[a-zA-Z(),. \s]+"'
name_pattern <- 'unaccented-name="[a-zA-Z(),./s ]+"'
name_data <- reg_data(name_pattern, rollCall274)
length(name_data)
name_pattern <- 'unaccented-name="[a-zA-Z(),.\' ]+"'
name_data <- reg_data(name_pattern, rollCall274)
length(name_data)
name_pattern <- 'unaccented-name="[a-zA-Z(),.-\' ]+"'
name_data <- reg_data(name_pattern, rollCall274)
name_pattern <- 'unaccented-name="[a-zA-Z(),.\'- ]+"'
name_data <- reg_data(name_pattern, rollCall274)
name_pattern <- 'unaccented-name="[a-zA-Z(),.\'\- ]+"'
name_pattern <- 'unaccented-name="[a-zA-Z(),.\':punct: ]+"'
name_data <- reg_data(name_pattern, rollCall274)
length(name_data)
name_pattern <- 'unaccented-name="[a-zA-Z\\-(),.\' ]+"'
name_data <- reg_data(name_pattern, rollCall274)
name_pattern <- 'unaccented-name="[a-zA-Z/-(),.\' ]+"'
name_data <- reg_data(name_pattern, rollCall274)
name_pattern <- 'unaccented-name="[a-zA-Z(),.\' |-]+"'
name_data <- reg_data(name_pattern, rollCall274)
length(name_data)
name_data
substr('abcdef', 1, 2)
substr('abcdef', 1, -2)
substr('abcdef', 1, -4)
substr('abcdef', -4, -2)
strsplit(name_data, split = '\\')
strsplit(name_data, split = '/\')
strsplit(name_data, split = '"')
q1w1
w11
w
w
1
end()
cat('3')
# code goes here
name_pattern <- 'unaccented-name="[a-zA-Z(),.\' |-]+"'
name_pattern <- 'unaccented-name="[a-zA-Z(),.\' |-]+"'
name_data <- reg_data(name_pattern, rollCall274)
name_data[0]
name_data[1]
strsplit(name_data[1], split = '"')
strsplit(name_data, split = '"')
apply(strsplit(name_data, split = '"'), '[')
strsplit(name_data, split = '"')[2]
strsplit(name_data, split = '"')[3]
sapply(strsplit(name_data, split = '"'), '[', 2)
length(name_data)
party_pattern <- 'party="[A-Z]"'
party_data <- reg_data(party_pattern, rollCall274)
party_data
length(party_data)
party_data <- substr(party_data, start = 7, stop = 9)
party_data
party_data <- substr(party_data, start = 8, stop = 9)
party_data
party_data <- substr(party_data, start = 8, stop = 10)
party_data
party_data <- substr(party_data, start = 7, stop = 8)
party_data
party_data <- substr(party_data, start = 7, stop = 9)
party_data
party_pattern <- 'party="[A-Z]"'
party_data <- reg_data(party_pattern, rollCall274)
party_data <- substr(party_data, start = 8, stop = 9)
party
party_data
party_pattern <- 'party="[A-Z]"'
party_data <- reg_data(party_pattern, rollCall274)
party_data <- substr(party_data, start = 8, stop = 8)
party_pattern <- 'party="[A-Z]"'
party_data <- reg_data(party_pattern, rollCall274)
party_data <- substr(party_data, start = 8, stop = 8)
head(party_data, 5)
summary(party_data)
tble(party_data)
table(party_data)
state="CA"
state_pattern <- 'state="[A-Z]{2}"'
state_data <- reg_data(state_pattern, rollCall274)
state_pattern <- 'state="[A-Z]{2}"'
state_data <- reg_data(state_pattern, rollCall274)
state_data
state_pattern <- 'state="[A-Z]{2}"'
state_data <- reg_data(state_pattern, rollCall274)
state_data <- substr(state_data, start = 9, stop = 10)
head(state_data, 5)
# code goes here
state_pattern <- 'state="[A-Z]{2}"'
state_data <- reg_data(state_pattern, rollCall274)
state_data <- substr(state_data, start = 8, stop = 10)
head(state_data, 5)
# code goes here
state_pattern <- 'state="[A-Z]{2}"'
state_data <- reg_data(state_pattern, rollCall274)
state_data <- substr(state_data, start = 8, stop = 9)
head(state_data, 5)
# code goes here
vote_pattern1 <- '<vote>[A-Za-z]{2,3}'
vote_data1 <- reg_data(vote_pattern1, rollCall274)
# vote_data1 <- substr(vote_data1, start = 8, stop = 9)
vote_data1
# code goes here
state_pattern <- 'state="[A-Z]{2}"'
state_data <- reg_data(state_pattern, rollCall274)
state_data <- substr(state_data, start = 6)
# code goes here
state_pattern <- 'state="[A-Z]{2}"'
state_data <- reg_data(state_pattern, rollCall274)
state_data <- substr(state_data, start = 6, stop = 0)
head(state_data, 5)
# code goes here
state_pattern <- 'state="[A-Z]{2}"'
state_data <- reg_data(state_pattern, rollCall274)
state_data <- substr(state_data, start = 6, stop = 100)
head(state_data, 5)
# code goes here
state_pattern <- 'state="[A-Z]{2}"'
state_data <- reg_data(state_pattern, rollCall274)
state_data <- substr(state_data, start = 8, stop = 9)
head(state_data, 5)
# code goes here
vote_pattern1 <- '<vote>[A-Za-z]{2,3}'
vote_data1 <- reg_data(vote_pattern1, rollCall274)
vote_data1 <- substr(vote_data1, start = 6, stop = 100)
# code goes here
vote_pattern1 <- '<vote>[A-Za-z]{2,3}'
vote_data1 <- reg_data(vote_pattern1, rollCall274)
vote_data1 <- substr(vote_data1, start = 6, stop = 100)
head(vote_data1, 5)
# code goes here
vote_pattern1 <- '<vote>[A-Za-z]{2,3}'
vote_data1 <- reg_data(vote_pattern1, rollCall274)
vote_data1 <- substr(vote_data1, start = 7, stop = 100)
head(vote_data1, 5)
length(vote_data1)
# code goes here
vote <- factor(vote_data1)
levels(vote)
# code goes here
vote <- factor(vote_data1)
numeric.vote <- ifelse(vote == 'Aye', 1, ifelse(vote == 'No', 0, -1))
numeric.vote
head(numeric.vote, 5)
# code goes here
rollCall274 <- data.frame(name, state, party, vote, numeric.vote)
# code goes here
rollCall274 <- data.frame(name_data, state_data, party_data, vote_data1, numeric.vote)
head(rollCall274, 5)
# code goes here
name_pattern <- 'unaccented-name="[a-zA-Z(),.\' |-]+"'
name_data <- reg_data(name_pattern, rollCall274)
name_data <- sapply(strsplit(name_data, split = '"'), '[', 2)
# code goes here
name_pattern <- 'unaccented-name="[a-zA-Z(),.\' |-]+"'
name_data <- reg_data(name_pattern, rollCall274)
name_data <- sapply(strsplit(name_data, split = '"'), '[', 2)
name_data
name_pattern <- 'unaccented-name="[a-zA-Z(),.\' |-]+"'
name_data <- reg_data(name_pattern, rollCall274)
name_data
rollCall274<-readLines("Roll_Call_274.xml")
# code goes here
length(rollCall274)
# code goes here
vote_pattern <- '<recorded-vote>'
votegrep <- grep(vote_pattern, rollCall274)
length(votegrep)
# code goes here
reg_data <- function (pattern, data) {
sgrep <- grep(pattern, data)
matches <- gregexpr(pattern = pattern, text = data[sgrep])
reg.data <- unlist(regmatches(data[sgrep], matches), use.names = FALSE)
return(reg.data)
}
id_pattern <- 'name-id="[A-Z][0-9]{6}"'
id_data <- reg_data(id_pattern, rollCall274)
id_data <- substr(id_data, start = 10, stop = 16)
head(id_data, 5)
# code goes here
name_pattern <- 'unaccented-name="[a-zA-Z(),.\' |-]+"'
name_data <- reg_data(name_pattern, rollCall274)
name_data <- sapply(strsplit(name_data, split = '"'), '[', 2)
length(name_data)
head(name_data, 5)
# code goes here
party_pattern <- 'party="[A-Z]"'
party_data <- reg_data(party_pattern, rollCall274)
party_data <- substr(party_data, start = 8, stop = 8)
head(party_data, 5)
table(party_data)
# code goes here
state_pattern <- 'state="[A-Z]{2}"'
state_data <- reg_data(state_pattern, rollCall274)
state_data <- substr(state_data, start = 8, stop = 9)
head(state_data, 5)
# code goes here
vote_pattern1 <- '<vote>[A-Za-z]{2,3}'
vote_data1 <- reg_data(vote_pattern1, rollCall274)
vote_data1 <- substr(vote_data1, start = 7, stop = 100)
head(vote_data1, 5)
# code goes here
vote <- factor(vote_data1)
numeric.vote <- ifelse(vote == 'Aye', 1, ifelse(vote == 'No', 0, -1))
head(numeric.vote, 5)
# code goes here
rollCall274 <- data.frame(name_data, state_data, party_data, vote_data1, numeric.vote)
head(rollCall274, 5)
rownames(rollCall274) <- id_data
head(rollCall274, 5)
head(rollCall274, 5)
strikes<-read.csv("strikes.csv", header = T)
italy.strikes<-strikes[strikes$country == "Italy", ]
dim(italy.strikes)
lm.fit<- lm(strike.volume ~ left.parliament, data = italy.strikes)
round(lm.fit$coefficients,3)
length(strikes)
head(strikes, 5)
nrows(strikes)
nrow(strikes)
B <- 100
resampled_ests <- matrix(NA, nrow = B, ncol = 2)
names(resampled_ests) <- c("Intercept_Est", "Slope_Est")
for (b in 1:B) {
data <- strikes[resampled_values[b,],]
ests <- lm(data$volume~data$parliament)$coefficients
resampled_ests[b, 1] <- ests[1]
resampled_ests[b, 2] <- ests[2]
}
head(strikes, 5)
B <- 100
resampled_ests <- matrix(NA, nrow = B, ncol = 2)
names(resampled_ests) <- c("Intercept_Est", "Slope_Est")
for (b in 1:B) {
data <- strikes[resampled_values[b,],]
ests <- lm(data$strike.volume~data$left.parliament)$coefficients
resampled_ests[b, 1] <- ests[1]
resampled_ests[b, 2] <- ests[2]
}
head(resampled_ests)
resampled_ests
resampled_ests[[1]]
resampled_ests[1
]
resampled_ests[1]
resampled_ests[1,]
resampled_ests[,1]
resampled_ests[,2]
var(resampled_ests[,2])
# code goes here
B <- 100
resampled_ests <- matrix(NA, nrow = B, ncol = 2)
names(resampled_ests) <- c("Intercept_Est", "Slope_Est")
for (b in 1:B) {
data <- strikes[resampled_values[b,],]
ests <- lm(data$strike.volume~data$left.parliament)$coefficients
resampled_ests[b, 1] <- ests[1]
resampled_ests[b, 2] <- ests[2]
}
head(resampled_ests)
var(resampled_ests[,1])
var(resampled_ests[,2])
apps<-read.csv("apps_v2.csv", header = T)
apps$Reviews<-as.numeric(apps$Reviews)
apps$Installs<-factor(apps$Installs, level= c("1+", "5+", "10+", "50+", "100+", "500+", "1,000+", "5,000+", "10,000+", "50,000+", "100,000+", "500,000+", "1,000,000+","5,000,000+","10,000,000+","50,000,000+", "100,000,000+", "500,000,000+", "1,000,000,000+"))
head(apps)
# code goes here
dim(apps)
# code goes here
#########
summary_result <- apply(apps, 2, summary)
summary_result
# code goes here
#########
summary_result <- sapply(apps, 2, summary)
# code goes here
#########
summary_result <- apply(apps, 2, summary)
boxplot(as.numeric(apps$Rating)~as.numeric(apps$Installs), xlab = 'Installs', ylab = 'Rating')
cat('Answer: based on the boxplot, we can see that when install between 2 and 12, the variance of Rating is large and data with lower installs have higher rating')
summary(apps$Rating)
# code goes here
#########
# summary_result <- apply(apps, 2, summary)
do.call(cbind, lapply(apps, summary))
# code goes here
#########
# summary_result <- apply(apps, 2, summary)
data.frame(unclass(summary(apps)), check.names = FALSE, stringsAsFactors = FALSE)
# code goes here
data.frame(unclass(summary(apps)), check.names = FALSE, stringsAsFactors = FALSE)
# code goes here
# data.frame(unclass(summary(apps)), check.names = FALSE, stringsAsFactors = FALSE)
lapply(apps, summary)
length(lapply(apps, summary))
# code goes here
B <- 100
resampled_ests <- matrix(NA, nrow = B, ncol = 2)
names(resampled_ests) <- c("Intercept_Est", "Slope_Est")
for (b in 1:B) {
data <- strikes[resampled_values[b,],]
ests <- lm(data$strike.volume~data$left.parliament)$coefficients
resampled_ests[b, 1] <- ests[1]
resampled_ests[b, 2] <- ests[2]
}
head(resampled_ests)
var(resampled_ests[,1])
var(resampled_ests[,2])
B <- 100
resampled_ests <- matrix(NA, nrow = B, ncol = 2)
names(resampled_ests) <- c("Intercept_Est", "Slope_Est")
for (b in 1:B) {
data <- strikes[resampled_values[b,],]
ests <- lm(data$strike.volume~data$left.parliament)$coefficients
resampled_ests[b, 1] <- ests[1]
resampled_ests[b, 2] <- ests[2]
}
head(resampled_ests)
var(resampled_ests[,1])
var(resampled_ests[,2])
apps<-read.csv("apps_v2.csv", header = T)
apps$Reviews<-as.numeric(apps$Reviews)
apps$Installs<-factor(apps$Installs, level= c("1+", "5+", "10+", "50+", "100+", "500+", "1,000+", "5,000+", "10,000+", "50,000+", "100,000+", "500,000+", "1,000,000+","5,000,000+","10,000,000+","50,000,000+", "100,000,000+", "500,000,000+", "1,000,000,000+"))
head(apps)
# code goes here
dim(apps)
# code goes here
# data.frame(unclass(summary(apps)), check.names = FALSE, stringsAsFactors = FALSE)
lapply(apps, summary)
# code goes here
boxplot(as.numeric(apps$Rating)~as.numeric(apps$Installs), xlab = 'Installs', ylab = 'Rating')
cat('Answer: based on the boxplot, we can see that when install between 2 and 12, the variance of Rating is large. Data with lower installs have higher median rating')
# code goes here
library(plyr)
# split
apps.split <- split(apps, apps$Category)
# apply
# ldply(apps.split, plot)
rollCall274<-readLines("Roll_Call_274.xml")
# code goes here
length(rollCall274)
# code goes here
vote_pattern <- '<recorded-vote>'
votegrep <- grep(vote_pattern, rollCall274)
length(votegrep)
# code goes here
reg_data <- function (pattern, data) {
sgrep <- grep(pattern, data)
matches <- gregexpr(pattern = pattern, text = data[sgrep])
reg.data <- unlist(regmatches(data[sgrep], matches), use.names = FALSE)
return(reg.data)
}
id_pattern <- 'name-id="[A-Z][0-9]{6}"'
id_data <- reg_data(id_pattern, rollCall274)
id_data <- substr(id_data, start = 10, stop = 16)
head(id_data, 5)
# code goes here
name_pattern <- 'unaccented-name="[a-zA-Z(),.\' |-]+"'
name_data <- reg_data(name_pattern, rollCall274)
name_data <- sapply(strsplit(name_data, split = '"'), '[', 2)
length(name_data)
head(name_data, 5)
# code goes here
party_pattern <- 'party="[A-Z]"'
party_data <- reg_data(party_pattern, rollCall274)
party_data <- substr(party_data, start = 8, stop = 8)
head(party_data, 5)
table(party_data)
# code goes here
state_pattern <- 'state="[A-Z]{2}"'
state_data <- reg_data(state_pattern, rollCall274)
state_data <- substr(state_data, start = 8, stop = 9)
head(state_data, 5)
# code goes here
vote_pattern1 <- '<vote>[A-Za-z]{2,3}'
vote_data1 <- reg_data(vote_pattern1, rollCall274)
vote_data1 <- substr(vote_data1, start = 7, stop = 100)
head(vote_data1, 5)
# code goes here
vote <- factor(vote_data1)
numeric.vote <- ifelse(vote == 'Aye', 1, ifelse(vote == 'No', 0, -1))
head(numeric.vote, 5)
# code goes here
rollCall274 <- data.frame(name_data, state_data, party_data, vote_data1, numeric.vote)
rownames(rollCall274) <- id_data
head(rollCall274, 5)
strikes<-read.csv("strikes.csv", header = T)
italy.strikes<-strikes[strikes$country == "Italy", ]
dim(italy.strikes)
lm.fit<- lm(strike.volume ~ left.parliament, data = italy.strikes)
round(lm.fit$coefficients,3)
B <- 100
resampled_ests <- matrix(NA, nrow = B, ncol = 2)
names(resampled_ests) <- c("Intercept_Est", "Slope_Est")
for (b in 1:B) {
data <- strikes[resampled_values[b,],]
ests <- lm(data$strike.volume~data$left.parliament)$coefficients
resampled_ests[b, 1] <- ests[1]
resampled_ests[b, 2] <- ests[2]
}
head(resampled_ests)
var(resampled_ests[,1])
var(resampled_ests[,2])
# code goes here
B <- 100
resampled_ests <- matrix(NA, nrow = B, ncol = 2)
names(resampled_ests) <- c("Intercept_Est", "Slope_Est")
for (b in 1:B) {
data <- strikes[resampled_values[b,],]
ests <- lm(data$strike.volume~data$left.parliament)$coefficients
resampled_ests[b, 1] <- ests[1]
resampled_ests[b, 2] <- ests[2]
}
head(resampled_ests)
var(resampled_ests[,1])
var(resampled_ests[,2])
