lines(x, f(x), col = 'blue')
set.seed(0)
norm.sim <- function(f, e, n){
res <- numeric(n)
n.accept <- 0
while (n.accept < n){
y <- cauchy.sim(1)
u <- runif(1)
if (u < f(y)/e(y, alpha = optalpha)){
n.accept <- n.accept + 1
res[n.accept] <- y
}
}
return(res)
}
norm.sim(f, e, 10)
set.seed(0)
norm.sim <- function(f, e, n){
res <- numeric(n)
n.accept <- 0
while (n.accept < n){
y <- cauchy.sim(1)
u <- runif(1)
if (u < f(y)/e(y, alpha = optalpha)){
n.accept <- n.accept + 1
res[n.accept] <- y
}
}
return(res)
}
norm.sim(f, e, 10)
normal.sim<-function(draws){
n=0
f.draws<-numeric(draws)
while(n<draws){
y<-cauchy.sim(1)
u<-runif(1)
if(u<f(y)/e(y,0.6)){
n<-n+1
f.draws[n]<-y
}
}
return(f.draws)
}
normal.sim(10)
set.seed(0)
norm.sim <- function(f, e, n){
res <- numeric(n)
n.accept <- 0
while (n.accept < n){
y <- cauchy.sim(1)
u <- runif(1)
if (u < f(y)/e(y, alpha = optalpha)){
n.accept <- n.accept + 1
res[n.accept] <- y
}
}
return(res)
}
norm.sim(f, e, 10)
normal.sim<-function(draws){
n=0
f.draws<-numeric(draws)
while(n<draws){
y<-cauchy.sim(1)
u<-runif(1)
if(u<f(y)/e(y,0.6)){
n<-n+1
f.draws[n]<-y
}
}
return(f.draws)
}
normal.sim(10)
set.seed(0)
norm.sim <- function(f, e, n){
res <- numeric(n)
n.accept <- 0
while (n.accept < n){
y <- cauchy.sim(1)
u <- runif(1)
if (u < f(y)/e(y, alpha = optalpha)){
n.accept <- n.accept + 1
res[n.accept] <- y
}
}
return(res)
}
norm.sim(f, e, 10)
set.seed(0)
normal.sim<-function(draws){
n=0
f.draws<-numeric(draws)
while(n<draws){
y<-cauchy.sim(1)
u<-runif(1)
if(u<f(y)/e(y,0.6)){
n<-n+1
f.draws[n]<-y
}
}
return(f.draws)
}
normal.sim(10)
set.seed(0)
norm.sim <- function(f, e, n){
res <- numeric(n)
n.accept <- 0
while (n.accept < n){
y <- cauchy.sim(1)
u <- runif(1)
if (u < f(y)/e(y, alpha = optalpha)){
n.accept <- n.accept + 1
res[n.accept] <- y
}
}
return(res)
}
norm.sim(f, e, 10)
set.seed(0)
n <- 10000
normal.draws <- norm.sim(f, e, 10000)
hist(normal.draws, prob = TRUE)
x <- seq(-7, 7, 0.001)
lines(x, f(x), col = 'blue')
set.seed(0)
n <- 10000
normal.draws <- norm.sim(f, e, 10000)
hist(normal.draws, prob = TRUE, ylim = (0,0.4))
set.seed(0)
n <- 10000
normal.draws <- norm.sim(f, e, 10000)
hist(normal.draws, prob = TRUE, ylim = c(0,0.4))
x <- seq(-7, 7, 0.001)
lines(x, f(x), col = 'blue')
set.seed(0)
n <- 10000
normal.draws <- norm.sim(f, e, 10000)
hist(normal.draws, prob = TRUE, ylim = c(0,0.4))
x <- seq(-5, 5, 0.001)
lines(x, f(x), col = 'blue')
set.seed(0)
norm.sim <- function(f, e, n){
res <- numeric(n)
n.accept <- 0
while (n.accept < n){
y <- cauchy.sim(1)
u <- runif(1)
if (u < f(y)/e(y, alpha = optalpha)){
n.accept <- n.accept + 1
res[n.accept] <- y
}
}
return(res)
}
norm.sim(f, e, 10)
set.seed(0)
n <- 10000
normal.draws <- norm.sim(f, e, 10000)
hist(normal.draws, prob = TRUE, ylim = c(0,0.4))
x <- seq(-5, 5, 0.001)
lines(x, f(x), col = 'blue')
set.seed(0)
random.walk.my <- function(x = 5){
path <- c(x)
while (x>0){
r <- runif(1,-2,1)
x <- x+r
path <- c(path, x)
}
return(path[path>0])
}
x.vals <- random.walk.my()
x.vals
set.seed(0)
random.walk.my <- function(x = 5){
path <- c(x)
while (x>0){
r <- runif(1,-2,1)
x <- x+r
path <- c(path, x)
}
return(path[path>0])
}
x.vals <- random.walk.my()
x.vals
plot(x.vals, xlab = 'iteration number', ylab = 'value', type = 'o')
random.walk <- function(x = 5, plot.walk = TRUE){
path <- c(x)
# num.steps <- 0
while (x>0){
r <- runif(1,-2,1)
x <- x+r
path <- c(path, x)
# num.steps <- num.steps + 1
}
path <- path[path>0]
if (plot.walk == TRUE){
plot(path, xlab = 'iteration number', ylab = 'value', type = 'o')
}
return(list(path, length(path)-1))
}
random.walk()
random.walk()
random.walk(10, FALSE)
random.walk(10, FALSE)
set.seed(0)
random.walk <- function(x = 5, plot.walk = TRUE){
path <- c(x)
# num.steps <- 0
while (x>0){
r <- runif(1,-2,1)
x <- x+r
path <- c(path, x)
# num.steps <- num.steps + 1
}
path <- path[path>0]
if (plot.walk == TRUE){
plot(path, xlab = 'iteration number', ylab = 'value', type = 'o')
}
return(list(path, length(path)-1))
}
random.walk()
random.walk()
random.walk(10, FALSE)
random.walk(10, FALSE)
set.seed(0)
res <- c()
for (i in seq(1:1000)) {
res <- c(res, random.walk(plot.walk = FALSE)[[2]])
}
mean(res)
length(res)
set.seed(0)
normal.sim<-function(draws){
n=0
f.draws<-numeric(draws)
while(n<draws){
y<-cauchy.sim(1)
u<-runif(1)
if(u<f(y)/e(y,alpha)){
n<-n+1
f.draws[n]<-y
}
}
return(f.draws)
}
normal.sim(10)
set.seed(0)
n <- 10000
normal.draws <- norm.sim(f, e, 10000)
hist(normal.draws, prob = TRUE, ylim = c(0,0.4))
x <- seq(-5, 5, 0.001)
lines(x, f(x), col = 'blue')
set.seed(0)
random.walk.my <- function(x = 5){
path <- c(x)
while (x>0){
r <- runif(1,-2,1)
x <- x+r
path <- c(path, x)
}
return(path[path>0])
}
x.vals <- random.walk.my()
x.vals
plot(x.vals, xlab = 'iteration number', ylab = 'value', type = 'o')
set.seed(0)
random.walk <- function(x = 5, plot.walk = TRUE){
path <- c(x)
# num.steps <- 0
while (x>0){
r <- runif(1,-2,1)
x <- x+r
path <- c(path, x)
# num.steps <- num.steps + 1
}
path <- path[path>0]
if (plot.walk == TRUE){
plot(path, xlab = 'iteration number', ylab = 'value', type = 'o')
}
return(list(path, length(path)-1))
}
random.walk()
random.walk()
random.walk(10, FALSE)
random.walk(10, FALSE)
set.seed(0)
res <- c()
for (i in seq(1:1000)) {
res <- c(res, random.walk(plot.walk = FALSE)[[2]])
}
mean(res)
set.seed(0)
res <- c()
for (i in seq(1:1000)) {
res <- c(res, random.walk(plot.walk = FALSE)[[2]])
}
mean(res)
set.seed(0)
res <- c()
for (i in seq(1:1000)) {
res <- c(res, random.walk(plot.walk = FALSE)[[2]])
}
mean(res)
random.walk <- function(x = 5, plot.walk = TRUE, seed = NULL){
if (!is.null(seed)){
set.seed(seed)
}
path <- c(x)
# num.steps <- 0
while (x>0){
r <- runif(1,-2,1)
x <- x+r
path <- c(path, x)
# num.steps <- num.steps + 1
}
path <- path[path>0]
if (plot.walk == TRUE){
plot(path, xlab = 'iteration number', ylab = 'value', type = 'o')
}
return(list(path, length(path)-1))
}
random.walk()
random.walk()
random.walk(plot.walk = FALSE, seed = 33)
random.walk(plot.walk = FALSE, seed = 33)
set.seed(0)
res <- c()
for (i in seq(1:1000)) {
res <- c(res, random.walk(plot.walk = FALSE)[[2]])
}
mean(res)
round(mean(res), 5)
set.seed(0)
res <- c()
for (i in seq(1:1000)) {
res <- c(res, random.walk(plot.walk = FALSE)[[2]])
}
mean(res)
set.seed(0)
random.walk <- function(x.start = 5, plot.walk = TRUE){
path <- c(x)
# num.steps <- 0
while (x>0){
r <- runif(1,-2,1)
x <- x+r
path <- c(path, x)
# num.steps <- num.steps + 1
}
path <- path[path>0]
if (plot.walk == TRUE){
plot(path, xlab = 'iteration number', ylab = 'value', type = 'o')
}
return(list(path, length(path)-1))
}
random.walk()
random.walk()
random.walk(10, FALSE)
random.walk(10, FALSE)
set.seed(0)
random.walk <- function(x.start = 5, plot.walk = TRUE){
x <- x.start
path <- c(x)
# num.steps <- 0
while (x>0){
r <- runif(1,-2,1)
x <- x+r
path <- c(path, x)
# num.steps <- num.steps + 1
}
path <- path[path>0]
if (plot.walk == TRUE){
plot(path, xlab = 'iteration number', ylab = 'value', type = 'o')
}
return(list(path, length(path)-1))
}
random.walk()
random.walk()
random.walk(10, FALSE)
random.walk(10, FALSE)
random.walk <- function(x.start = 5, plot.walk = TRUE, seed = NULL){
x <- x.start
if (!is.null(seed)){
set.seed(seed)
}
path <- c(x)
# num.steps <- 0
while (x>0){
r <- runif(1,-2,1)
x <- x+r
path <- c(path, x)
# num.steps <- num.steps + 1
}
path <- path[path>0]
if (plot.walk == TRUE){
plot(path, xlab = 'iteration number', ylab = 'value', type = 'o')
}
return(list(path, length(path)-1))
}
random.walk()
random.walk()
random.walk(plot.walk = FALSE, seed = 33)
random.walk(plot.walk = FALSE, seed = 33)
set.seed(0)
random.walk <- function(x.start = 5, plot.walk = TRUE, seed = NULL){
x <- x.start
if (!is.null(seed)){
set.seed(seed)
}
path <- c(x)
# num.steps <- 0
while (x>0){
r <- runif(1,-2,1)
x <- x+r
path <- c(path, x)
# num.steps <- num.steps + 1
}
path <- path[path>0]
if (plot.walk == TRUE){
plot(path, xlab = 'iteration number', ylab = 'value', type = 'o')
}
return(list(path, length(path)-1))
}
random.walk()
random.walk()
random.walk(plot.walk = FALSE, seed = 33)
random.walk(plot.walk = FALSE, seed = 33)
g <- function(x) {
return(sqrt(1-x^2))
}
plot(seq(0,1,.01),g(seq(0,1,.01)), type="l", col="purple")
pi**2/4
set.seed(0)
g.over.p <- function(x){
return(sqrt(1-x**2))
}
mean(g.over.p(runif(10000)))*4
set.seed(0)
g.over.p <- function(x){
return(sqrt(1-x**2))
}
mean(g.over.p(runif(100000)))*4
set.seed(0)
g.over.p <- function(x){
return(sqrt(1-x**2))
}
mean(g.over.p(runif(1000000)))*4
abs(sim_pi - pi)
set.seed(0)
g.over.p <- function(x){
return(sqrt(1-x**2))
}
sim_pi <- mean(g.over.p(runif(1000000)))*4
abs(sim_pi - pi)
set.seed(0)
g.over.p <- function(x){
return(sqrt(1-x**2))
}
sim_pi <- mean(g.over.p(runif(1000000)))*4
sim_pi
abs(sim_pi - pi)
set.seed(0)
g.over.p <- function(x){
return(sqrt(1-x**2))
}
sim_pi <- mean(g.over.p(runif(10000000)))*4
sim_pi
abs(sim_pi - pi)
set.seed(0)
g.over.p <- function(x){
return(sqrt(1-x**2))
}
sim_pi <- mean(g.over.p(runif(10000000)))*4
sim_pi
abs(sim_pi - pi)
set.seed(0)
g.over.p <- function(x){
return(sqrt(1-x**2))
}
sim_pi <- mean(g.over.p(runif(15000000)))*4
sim_pi
abs(sim_pi - pi)
set.seed(0)
g.over.p <- function(x){
return(sqrt(1-x**2))
}
sim_pi <- mean(g.over.p(runif(1000000)))*4
sim_pi
abs(sim_pi - pi)
set.seed(0)
g.over.p <- function(x){
return(sqrt(1-x**2))
}
sim_pi <- mean(g.over.p(runif(1000000)))*4
sim_pi
abs(sim_pi - pi)
1/1000
set.seed(0)
g.over.p <- function(x){
return(sqrt(1-x**2))
}
sim_pi <- mean(g.over.p(runif(1000000)))*4
sim_pi
abs(sim_pi - pi) < 1/1000
set.seed(0)
g.over.p <- function(x){
return(sqrt(1-x**2))
}
sim_pi <- mean(g.over.p(runif(1000000)))*4
sim_pi
abs(sim_pi - pi) < 1/1000
